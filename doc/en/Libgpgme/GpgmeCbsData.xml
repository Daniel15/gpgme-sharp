<Type Name="GpgmeCbsData" FullName="Libgpgme.GpgmeCbsData">
  <TypeSignature Language="C#" Value="public abstract class GpgmeCbsData : Libgpgme.GpgmeData" />
  <AssemblyInfo>
    <AssemblyName>gpgme-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Libgpgme.GpgmeData</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>An abstract class for callback based data buffers.</summary>
    <remarks>If neither memory nor file based data objects are a good fit for your application, you can inherit from this class and implement the required callback functions by yourself.
</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GpgmeCbsData ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new callback based data buffer.</summary>
        <remarks>
          <block subset="none" type="note">
            <para>
Your inherited class must override the following properies:

<list type="table"><listheader><term>Name</term><description>Method</description></listheader><item><term>CanRead</term><description><see cref="P:System.IO.Stream.CanRead" /></description></item><item><term>CanWrite</term><description><see cref="P:System.IO.Stream.CanWrite" /></description></item><item><term>CanSeek</term><description><see cref="P:System.IO.Stream.CanSeek" /></description></item><item><term>CanRelease</term><description><see cref="P:Libgpgme.GpgmeCbsData.CanRelease" /></description></item></list></para>
            <para>
The GPGME backend will do callbacks only for methods for which their Can* properties returned <see langword="true" /> at initialisation time.
</para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GpgmeCbsData (bool canRead, bool canWrite, bool canSeek, bool canRelease);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canRead" Type="System.Boolean" />
        <Parameter Name="canWrite" Type="System.Boolean" />
        <Parameter Name="canSeek" Type="System.Boolean" />
        <Parameter Name="canRelease" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canRead">If <see langword="true" />, read() callbacks from the GPGME backend will be enabled.</param>
        <param name="canWrite">If <see langword="true" />, write() callbacks from the GPGME backend will be enabled.</param>
        <param name="canSeek">If <see langword="true" />, seek() callbacks from the GPGME backend will be enabled.</param>
        <param name="canRelease">If <see langword="true" />, release() callbacks from the GPGME backend will be enabled.</param>
        <summary>Creates a new callback based data buffer.</summary>
        <remarks>
          <block subset="none" type="note">
            <para>
Your inherited class must override the following properies:

<list type="table"><listheader><term>Name</term><description>Method</description></listheader><item><term>CanRead</term><description><see cref="P:System.IO.Stream.CanRead" /></description></item><item><term>CanWrite</term><description><see cref="P:System.IO.Stream.CanWrite" /></description></item><item><term>CanSeek</term><description><see cref="P:System.IO.Stream.CanSeek" /></description></item><item><term>CanRelease</term><description><see cref="P:Libgpgme.GpgmeCbsData.CanRelease" /></description></item></list></para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRelease">
      <MemberSignature Language="C#" Value="public abstract bool CanRelease { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates if GPGME will callback if a user-implemented data object should be destroyed.</summary>
        <value>A <see cref="T:System.Boolean" />. If <see langword="true" />, the inherited class must implement (override) the <see cref="M:Libgpgme.GpgmeCbsData.ReleaseCB()" /> method.</value>
        <remarks>Release functions are called by GPGME if it wants to destroy a user-implemented data object. 

</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastCallbackException">
      <MemberSignature Language="C#" Value="public Exception LastCallbackException;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The last exception that occurred during a callback from the GPGME backend operation.</summary>
        <remarks>Exception must not be propagated to P/Invoke functions. Therefore any exception that occurs during a callback will be saved into this field.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCB">
      <MemberSignature Language="C#" Value="protected virtual IntPtr ReadCB (IntPtr bufPtr, long size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufPtr" Type="System.IntPtr" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bufPtr">A pointer to the system memory where the requested number of bytes must be written.</param>
        <param name="size">The requested number of bytes.</param>
        <summary>This is the function which GPGME calls if it wants to read data from a user-implemented data object.</summary>
        <returns>The number of bytes that have been written OR <see cref="P:Libgpgme.GpgmeData.ERROR" /> on any error.</returns>
        <remarks>It is only required for input data objects (i.e. <see cref="P:System.IO.Stream.CanRead" /> is <see langword="true" />).

<block subset="none" type="note"><para>
The <see cref="M:System.Runtime.InteropServices.Marshal.Copy" /> method is recommended to copy data from managed to unmanaged memory.
  </para></block></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseCB">
      <MemberSignature Language="C#" Value="protected virtual void ReleaseCB ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This is the function which GPGME calls if it wants to destroy a user-implemented data object.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SeekCB">
      <MemberSignature Language="C#" Value="protected virtual IntPtr SeekCB (IntPtr offset, System.IO.SeekOrigin whence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.IntPtr" />
        <Parameter Name="whence" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">A <see cref="T:System.IntPtr" /> that specifies the byte offset relative to origin.</param>
        <param name="whence">A <see cref="T:System.IO.SeekOrigin" /> value indicating the reference point used to obtain the new position.</param>
        <summary>This is the function which GPGME calls if it wants to change the current read/write position in a user-implemented data object (stream).</summary>
        <returns>
          <para>A <see cref="T:System.IntPtr" /> that specifies the new position within the current stream OR <see cref="P:Libgpgme.GpgmeData.ERROR" /> on any error..</para>
        </returns>
        <remarks>It is only required if <see cref="P:System.IO.Stream.CanSeek" /> is <see langword="true" />.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteCB">
      <MemberSignature Language="C#" Value="protected virtual IntPtr WriteCB (IntPtr bufPtr, long size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufPtr" Type="System.IntPtr" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bufPtr">A pointer to the system memory where the requested number of bytes can be read.</param>
        <param name="size">The requested number of bytes.</param>
        <summary>This is the function which GPGME calls if it wants to write data to a user-implemented data object.</summary>
        <returns>The number of bytes that have been read from the memory and written into the user-implemented stream OR <see cref="P:Libgpgme.GpgmeData.ERROR" /> on any error.</returns>
        <remarks>It is only required for output data objects (i.e. <see cref="P:System.IO.Stream.CanWrite" /> is <see langword="true" />).

<block subset="none" type="note"><para>
The <see cref="M:System.Runtime.InteropServices.Marshal.Copy" /> method is recommended to copy data from managed to unmanaged memory.
  </para></block></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
