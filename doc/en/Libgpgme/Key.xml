<Type Name="Key" FullName="Libgpgme.Key">
  <TypeSignature Language="C#" Value="public class Key : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>gpgme-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A class that contains information about a key.</summary>
    <remarks>Currently <see cref="C:Libgpgme.Key" /> can represent either an S/Mime (X.509) or an OpenPGP key.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanAuthenticate">
      <MemberSignature Language="C#" Value="public bool CanAuthenticate { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key can be used for authentication.</summary>
        <value>Is <see langword="true" /> if the key (ie one of its subkeys) can be used for authentication.
</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanCertify">
      <MemberSignature Language="C#" Value="public bool CanCertify { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key can be used to create key certificates.</summary>
        <value>Is <see langword="true" /> if the key (ie one of its subkeys) can be used to create key certificates.
</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanEncrypt">
      <MemberSignature Language="C#" Value="public bool CanEncrypt { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key can be used for encryption.</summary>
        <value>Is <see langword="true" /> if the key (ie. one of its subkeys) can be used for encryption.
</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanSign">
      <MemberSignature Language="C#" Value="public bool CanSign { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key can be used to create data signatures.</summary>
        <value>Is <see langword="true" /> if the key (ie one of its subkeys) can be used to create data signatures.
</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ChainId">
      <MemberSignature Language="C#" Value="public string ChainId { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The chain ID.</summary>
        <value>A <see cref="T:System.String" />.</value>
        <remarks>If <see cref="P:Libgpgme.Key.Protocol" /> is <see cref="P:Libgpgme.Protocol.CMS" />, then this is the chain ID, which can be used to built the certificate chain.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disabled">
      <MemberSignature Language="C#" Value="public bool Disabled { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key has been disabled.</summary>
        <value>Is <see langword="true" /> if the key is disabled.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes a Key object.</summary>
        <remarks>The internal GPGME reference count of this key will be decremented.</remarks>
      </Docs>
    </Member>
    <Member MemberName="editlock">
      <MemberSignature Language="C#" Value="protected object editlock;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A lock object used for thread safety.</summary>
        <remarks>Use the lock keyword on this field if your inherited class does (edit-) operations on key.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expired">
      <MemberSignature Language="C#" Value="public bool Expired { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key is expired.</summary>
        <value>Is <see langword="true" /> if the key is expired.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Fingerprint">
      <MemberSignature Language="C#" Value="public string Fingerprint { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The key's fingerprint.</summary>
        <value>A <see cref="T:System.String" /> that contains the (hexdecimal) fingerprint of a key.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Invalid">
      <MemberSignature Language="C#" Value="public bool Invalid { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key is invalid.</summary>
        <value>Is <see langword="true" /> if the key is invalid.</value>
        <remarks>This is <see langword="true" /> if the key is invalid. This might have several reasons, for a example for the S/MIME backend, it will be set in during key listsing if the key could not be validated due to a missing certificates or unmatched policies.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQualified">
      <MemberSignature Language="C#" Value="public bool IsQualified { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key can be used for qualified signatures.</summary>
        <value>Is <see langword="true" /> if the key can be used for qualified signatures.
</value>
        <remarks>Is <see langword="true" /> if the key can be used for qualified signatures according to local government regulations.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IssuerName">
      <MemberSignature Language="C#" Value="public string IssuerName { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The issuer name.</summary>
        <value>A <see cref="T:System.String" />.</value>
        <remarks>If <see cref="P:Libgpgme.Key.Protocol" /> is <see cref="P:Libgpgme.Protocol.CMS" />, then this is the issuer name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IssuerSerial">
      <MemberSignature Language="C#" Value="public string IssuerSerial { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The the issuer serial.</summary>
        <value>A <see cref="System.String" />.</value>
        <remarks>If <see cref="P:Libgpgme.Key.Protocol" /> is <see cref="P:Libgpgme.Protocol.CMS" />, then this is the issuer serial.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyEditCallback">
      <MemberSignature Language="C#" Value="protected virtual int KeyEditCallback (IntPtr handle, Libgpgme.KeyEditStatusCode status, string args, System.IO.Stream fd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="status" Type="Libgpgme.KeyEditStatusCode" />
        <Parameter Name="args" Type="System.String" />
        <Parameter Name="fd" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="handle">A <see cref="T:System.IntPtr" /> handle that was provided by the user at start of operation.</param>
        <param name="status">A <see cref="T:Libgpgme.KeyEditStatusCode" />.</param>
        <param name="args">A <see cref="T:System.String" /> containing the arguments.</param>
        <param name="fd">A <see cref="T:System.IO.Stream" /> used for communication with the engine's key editing procedure.</param>
        <summary>A callback function which GPGME calls if a key edit operation is on-going.</summary>
        <returns>A <see cref="T:System.Integer" />. If the returning value is not 0, the key editing procedure will be stopped. See "Remarks" for more information.</returns>
        <remarks>
          <para>
KeyEditCallback method must be overwritten by the inherited class.
</para>
          <para>
It is the functions which GPGME calls if a key edit operation is on-going. The status code <paramref name="status" /> and the argument line <paramref name="args" /> are passed through by GPGME from the crypto engine. The Stream <paramref name="fd" /> is <see langword="null" /> for normal status messages.  
</para>
          <para>
If <paramref name="status" /> indicates a command rather than a status message, the response to the command should be written to <paramref name="fd" />. The <paramref name="handle" /> was provided by the user at start of operation <see cref="M:Libgpgme.Key.StartEdit(Libgpgme.Context,System.IntPtr,Libgpgme.GpgmeData)" />.
</para>
          <para>
The function should return 0 or an error value. If the returning value is not 0, GPGME will stop the key editing procedure and an error will be thrown.
</para>
          <para>
If the KeyEditCallback method of the inherited class throws an exception during the callback, it will be saved in the <see cref="P:Libgpgme.Key.LastCallbackException" /> attribute.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyId">
      <MemberSignature Language="C#" Value="public string KeyId { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The key ID.</summary>
        <value>A <see cref="T:System.String" /> that contains the (hexdecimal) key id.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="KeylistMode">
      <MemberSignature Language="C#" Value="public Libgpgme.KeylistMode KeylistMode { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.KeylistMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The keylist mode that was active when the key was retrieved.</summary>
        <value>A bit-vector if the <see cref="T:Libgpgme.KeylistMode" /> that was active when the key was retrieved.</value>
        <remarks>You can change the <see cref="T:Libgpgme.KeylistMode" /> of the context by using the <see cref="P:Libgpgme.Context.KeyListMode" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastCallbackException">
      <MemberSignature Language="C#" Value="public Exception LastCallbackException;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The last exception that occurred during a key-edit operation.</summary>
        <remarks>Some key types allow operation on the key itself (e.g. editing). If the underlying crypto backend throws an error, this property is set.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerTrust">
      <MemberSignature Language="C#" Value="public Libgpgme.Validity OwnerTrust { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Validity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The owner trust.</summary>
        <value>A <see cref="T:Libgpgme.Validity" /> value.</value>
        <remarks>If <see cref="P:Libgpgme.Key.Protocol" /> is <see cref="P:Libgpgme.Protocol.OpenPGP" />, then this is the owner trust.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="Protocol">
      <MemberSignature Language="C#" Value="public Libgpgme.Protocol Protocol { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Protocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the protocol supported by this key.</summary>
        <value>The <see cref="C:Libgpgme.Protocol" /> supported by this key.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Revoked">
      <MemberSignature Language="C#" Value="public bool Revoked { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key has been revoked.</summary>
        <value>Is <see langword="true" /> if the key is revoked.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Secret">
      <MemberSignature Language="C#" Value="public bool Secret { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the key is a secret key. </summary>
        <value>Is true if the key is a secret key.  
</value>
        <remarks>
          <block subset="none" type="note">
            <para>
This will always be <see langword="true" /> even if the corresponding subkey flag may be <see langword="false" /> (offline/stub keys).
  </para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartEdit">
      <MemberSignature Language="C#" Value="protected int StartEdit (Libgpgme.Context ctx, IntPtr handle, Libgpgme.GpgmeData data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Libgpgme.Context" />
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="data" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="ctx">A <see cref="C:Libgpgme.Context" /> used for the editing operation.</param>
        <param name="handle">A <see cref="T:System.IntPtr" /> value (handle) that can be used to identify callback calls from GPGME.</param>
        <param name="data">A <see cref="C:Libgpgme.GpgmeData" /> object.</param>
        <summary>Starts the key editing operation.</summary>
        <returns>A <see cref="T:System.Int32" /> containing an error value. Is 0 if the operation completed successfully.</returns>
        <remarks>A class that is inherited from <see cref="C:Libgpgme.Key" /> can call this method in order to start a key editing operation. In this case, the <see cref="M:Libgpgme.Key.KeyEditCallback(IntPtr,Libgpgme.KeyEditStatusCode,System.String,System.IO.Stream)" /> method MUST be overwritten by the inherited class.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subkeys">
      <MemberSignature Language="C#" Value="public Libgpgme.Subkey Subkeys { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Subkey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The subkeys of the key.</summary>
        <value>The first <see cref="C:Libgpgme.Subkey" /> in the list. <see langword="null" /> if no subkeys are available.</value>
        <remarks>
          <para>
This is a linked list with the subkeys of the key.  The first subkey in the list is the primary key and usually available.
</para>
          <para>
You can enumerate the linked list with the subkey's <see cref="P:Libgpgme.Subkey.Next" /> property or by using the <see cref="M:Libgpgme.Subkey.GetEnumerator()" /> method.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public Libgpgme.UserId Uid { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.UserId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The primary user ID of a key.</summary>
        <value>The first <see cref="C:Libgpgme.UserId" /> in the list. <see langword="null" /> if no user ID information available.</value>
        <remarks>This property is a reference to <see cref="P:Libgpgme.Key.Uids" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Uids">
      <MemberSignature Language="C#" Value="public Libgpgme.UserId Uids { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.UserId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The user IDs of the key.</summary>
        <value>The first <see cref="C:Libgpgme.UserId" /> in the list. <see langword="null" /> if no user IDs are available.</value>
        <remarks>
          <para>
This is a linked list with the user IDs of the key.  The first user ID in the list is the main (or primary) user ID.
</para>
          <para>
You can enumerate the linked list with the user ID's <see cref="P:Libgpgme.UserId.Next" /> property or by using the <see cref="M:Libgpgme.UserId.GetEnumerator()" /> method.
</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
