<Type Name="Context+ContextSignatureNotations" FullName="Libgpgme.Context+ContextSignatureNotations">
  <TypeSignature Language="C#" Value="public class Context.ContextSignatureNotations : System.Collections.Generic.IEnumerable&lt;Libgpgme.SignatureNotation&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Context/ContextSignatureNotations extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class Libgpgme.SignatureNotation&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>gpgme-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Libgpgme.SignatureNotation&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A class used to list and modify signature notations data of a context.</summary>
    <remarks>By using the member method <see cref="M:Libgpgme.Context+ContextSignatureNotations.Add(System.String,System.String,Libgpgme.SignatureNotationFlags)" />, you can attach arbitrary notation data to a signature. This information is then available to the user when the signature is verified.
</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, string value, Libgpgme.SignatureNotationFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, string value, valuetype Libgpgme.SignatureNotationFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="flags" Type="Libgpgme.SignatureNotationFlags" />
      </Parameters>
      <Docs>
        <param name="name">A <see cref="T:System.String" /> that contains the Notation name.</param>
        <param name="value">A <see cref="T:System.String" /> that contains the Notation value.</param>
        <param name="flags">To be added.</param>
        <summary>Adds notation data to the context.</summary>
        <remarks>
          <para>
The function adds the notation data with the name <paramref name="name" /> and the value <paramref name="value" /> to the context
</para>
          <para>
Subsequent signing operations will include this notation data, as well as any other notation data that was added since the creation of the context or the last <see cref="M:Libgpgme.Context+ContextSignatureNotations.Clear()" /> operation.
</para>
The arguments <paramref name="name" /> and <paramref name="value" /> must be strings in human-readable form.  The flag <see cref="P:Libgpgme.SignatureNotationFlags.HumanReadable" /> is implied (non-human-readable notation data is currently not supported). The strings must be in UTF-8 encoding (will be automatically transformed when using <see cref="T:System.String" />).
<para>
     If <paramref name="name" /> is <see langword="null" />, then <paramref name="value" /> should be a policy URL.
</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the notation data from the context.</summary>
        <remarks>The function removes the notation data from the context. Subsequent signing operations from this context will not include any notation data.
<block subset="none" type="note"><para>
Every context starts with an empty notation data list.
  </para></block></remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Libgpgme.SignatureNotation Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.SignatureNotation Get() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.SignatureNotation</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Receives the notation data from the context.</summary>
        <returns>If notation data is available, a <see cref="C:Libgpgme.SignatureNotation" /> object is returned. If there is currently no notation data added for this context, <see langword="null" /> is returned.</returns>
        <remarks>The function returns a linked list of notation data objects that are contained in the context. You can get the next <see cref="C:Libgpgme.SignatureNotation" /> through the <see cref="P:Libgpgme.SignatureNotation.Next" /> property or enumerate all entries through the <see cref="M:Libgpgme.SignatureNotation.GetEnumerator()" /> method.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;Libgpgme.SignatureNotation&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Libgpgme.SignatureNotation&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Libgpgme.SignatureNotation&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
