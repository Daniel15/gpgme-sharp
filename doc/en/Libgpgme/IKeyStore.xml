<Type Name="IKeyStore" FullName="Libgpgme.IKeyStore">
  <TypeSignature Language="C#" Value="public interface IKeyStore" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IKeyStore" />
  <AssemblyInfo>
    <AssemblyName>gpgme-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>An interface that contains the basic methods to retrieve key information.</summary>
    <remarks>A KeyStore that implements <see cref="T:Libgpgme.IKeyStore" /> provides all methods needed to import, export, delete and enumerate keys.

<block subset="none" type="note"><para>
For documentation of GPGME's engine specific keystore(s) see <see cref="P:Libgpgme.Context.KeyStore" /> and <see cref="C:Libgpgme.KeyStore" />.
  </para></block></remarks>
  </Docs>
  <Members>
    <Member MemberName="DeleteKey">
      <MemberSignature Language="C#" Value="public void DeleteKey (Libgpgme.Key key, bool deleteSecret);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteKey(class Libgpgme.Key key, bool deleteSecret) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Libgpgme.Key" />
        <Parameter Name="deleteSecret" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="C:Libgpgme.Key" /> that shall be deleted from the store.</param>
        <param name="deleteSecret">If <see langword="true" /> the secret key will be deleted as well.</param>
        <summary>Can be used to delete a specific key from the store.</summary>
        <remarks>The function deletes the key <paramref name="key" /> from the keyring.  If <paramref name="deleteSecret" /> is <see langword="false" />, only public keys are deleted, otherwise secret keys are deleted as well, if that is supported.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (string pattern, Libgpgme.GpgmeData keydata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Export(string pattern, class Libgpgme.GpgmeData keydata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="keydata" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:System.String" /> containing an engine specific expression that is used to limit the list of returned keys.</param>
        <param name="keydata">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer.</param>
        <summary>Extracts public keys and returns them in a user-supplied data buffer.</summary>
        <remarks>
          <para>
The function extracts public keys and returns them in the data buffer <paramref name="keydata" />.
</para>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an engine specific expression that is used to limit the list to all keys matching the pattern.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (string[] pattern, Libgpgme.GpgmeData keydata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Export(string[] pattern, class Libgpgme.GpgmeData keydata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String[]" />
        <Parameter Name="keydata" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="pattern">An array of <see cref="T:System.String" />s, each containing an engine specific expression that is used to limit the list of returned keys.</param>
        <param name="keydata">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer.</param>
        <summary>Extracts public keys and returns them in a user-supplied data buffer.</summary>
        <remarks>
          <para>
The function extracts public keys and returns them in the data buffer <paramref name="keydata" />.
</para>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an array of engine specific expressions that are used to limit the list to all keys matching the pattern.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public Libgpgme.Key GetKey (string fpr, bool secretOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Libgpgme.Key GetKey(string fpr, bool secretOnly) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fpr" Type="System.String" />
        <Parameter Name="secretOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fpr">A <see cref="T:System.String" /> containing the fingerprint (or key ID) of the requested key.</param>
        <param name="secretOnly">If <see langword="true" />, get the secret key.</param>
        <summary>Can be used to retrieve a single key.</summary>
        <returns>A <see cref="C:Libgpgme.Key" /> object.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public Libgpgme.Key[] GetKeyList (string pattern, bool secretOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Libgpgme.Key[] GetKeyList(string pattern, bool secretOnly) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="secretOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:System.String" /> containing an engine specific expression that is used to limit the list of returned <see cref="C:Libgpgme.Key" /> objects.</param>
        <param name="secretOnly">If <see langword="true" />, the returning list is restricted to secret keys only.</param>
        <summary>Initiates a key listing operation.</summary>
        <returns>An array of <see cref="C:Libgpgme.Key" /> objects. Depending on the engine <see cref="C:Libgpgme.PgpKey" />s or <see cref="C:Libgpgme.X509Key" />s are returned.</returns>
        <remarks>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an engine specific expression that is used to limit the list to all keys matching the pattern.  
</para>
          <block subset="none" type="note">
            <para>
The total length of the pattern is restricted to an engine-specific maximum (a couple of hundred characters are usually accepted).  The pattern should be used to restrict the search to a certain common name or user, not to list many specific keys at once by listing their fingerprints or key IDs.
</para>
          </block>
          <para>
If <paramref name="secretOnly" /> is not <see langword="false" />, the list is restricted to secret keys only.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public Libgpgme.Key[] GetKeyList (string[] pattern, bool secretOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Libgpgme.Key[] GetKeyList(string[] pattern, bool secretOnly) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String[]" />
        <Parameter Name="secretOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">An array of <see cref="T:System.String" />. Each string should contain an engine specific expression that is used to limit the list of returned <see cref="C:Libgpgme.Key" /> objects.</param>
        <param name="secretOnly">If <see langword="true" />, the returning list is restricted to secret keys only.</param>
        <summary>Initiates a key listing operation.</summary>
        <returns>An array of <see cref="C:Libgpgme.Key" /> objects. Depending on the engine <see cref="C:Libgpgme.PgpKey" />s or <see cref="C:Libgpgme.X509Key" />s are returned.</returns>
        <remarks>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an array with engine specific expressions that are used to limit the list to all keys matching the pattern.  
</para>
          <block subset="none" type="note">
            <para>
The total length of the pattern is restricted to an engine-specific maximum (a couple of hundred characters are usually accepted).  The pattern should be used to restrict the search to a certain common name or user, not to list many specific keys at once by listing their fingerprints or key IDs.
</para>
          </block>
          <para>
If <paramref name="secretOnly" /> is not <see langword="false" />, the list is restricted to secret keys only.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public Libgpgme.ImportResult Import (Libgpgme.GpgmeData keydata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Libgpgme.ImportResult Import(class Libgpgme.GpgmeData keydata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.ImportResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keydata" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="keydata">A <see cref="C:Libgpgme.GpgmeData" /> object that contains the keys.</param>
        <summary>Adds the keys in the user-supplied data buffer to the key ring.</summary>
        <returns>An <see cref="C:Libgpgme.ImportResult" /> object.</returns>
        <remarks>
          <para>
The function adds the keys in the data buffer <paramref name="keydata" /> to the keyring of the keystore. The format of <paramref name="keydata" /> can be ASCII armored, for example, but the details are specific to the used keystore type.
</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
