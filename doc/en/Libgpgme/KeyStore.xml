<Type Name="KeyStore" FullName="Libgpgme.KeyStore">
  <TypeSignature Language="C#" Value="public class KeyStore : Libgpgme.IKeyGenerator, Libgpgme.IKeyStore" />
  <AssemblyInfo>
    <AssemblyName>gpgme-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Libgpgme.IKeyGenerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Libgpgme.IKeyStore</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A class that represents the default key store.</summary>
    <remarks>
      <para>
The most cryptographic operations require that recipients or signers are specified.  This is always done by specifying the respective keys that should be used for the operation. A KeyStore that implements <see cref="T:Libgpgme.IKeyStore" /> provides all methods needed to import, export, delete and enumerate such keys. Furthermore if it implements <see cref="T:Libgpgme.IKeyGenerator" /> it can be used to generate new keys as well.
</para>
You can use the <see cref="P:Libgpgme.Context.KeyStore" /> property to receive an engine-specific default key store object.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyStore (Libgpgme.Context ctx);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ctx" Type="Libgpgme.Context" />
      </Parameters>
      <Docs>
        <param name="ctx">A <see cref="C:Libgpgme.Context" /> that used to retrieve the default key store from.
<block subset="none" type="note"><para>
It will use the engine to which the context's <see cref="P:Libgpgme.Context.Protocol" /> property refers to.
  </para></block></param>
        <summary>Creates a new KeyStore object.</summary>
        <remarks>You can use the <see cref="P:Libgpgme.Context.KeyStore" /> property to receive an engine-specific default key store object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public Libgpgme.Context Context { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The context that was used to retrieve the engine-specific key store.</summary>
        <value>A <see cref="C:Libgpgme.Context" /> object.</value>
        <remarks>The <see cref="P:Libgpgme.Context.Protocol" /> property refers to the currently used engine.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteKey">
      <MemberSignature Language="C#" Value="public void DeleteKey (Libgpgme.Key key, bool deleteSecret);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Libgpgme.Key" />
        <Parameter Name="deleteSecret" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="C:Libgpgme.Key" /> that shall be deleted from the store.</param>
        <param name="deleteSecret">If <see langword="true" /> the secret key will be deleted as well.</param>
        <summary>Can be used to delete a specific key from the store.</summary>
        <remarks>The function deletes the key <paramref name="key" /> from the keyring.  If <paramref name="deleteSecret" /> is <see langword="false" />, only public keys are deleted, otherwise secret keys are deleted as well, if that is supported.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (string pattern, Libgpgme.GpgmeData keydata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="keydata" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:System.String" /> containing an engine specific expression that is used to limit the list of returned keys.</param>
        <param name="keydata">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer.</param>
        <summary>Extracts public keys and returns them in a user-supplied data buffer.</summary>
        <remarks>
          <para>
The function extracts public keys and returns them in the data buffer <paramref name="keydata" />. The output format of the key data returned is determined by the ASCII armor attribute set for the context (see <see cref="P:Libgpgme.Context.Armor" />).
</para>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an engine specific expression that is used to limit the list to all keys matching the pattern.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (string[] pattern, Libgpgme.GpgmeData keydata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String[]" />
        <Parameter Name="keydata" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="pattern">An array of <see cref="T:System.String" />s, each containing an engine specific expression that is used to limit the list of returned keys.</param>
        <param name="keydata">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer.</param>
        <summary>Extracts public keys and returns them in a user-supplied data buffer.</summary>
        <remarks>
          <para>
The function extracts public keys and returns them in the data buffer <paramref name="keydata" />. The output format of the key data returned is determined by the ASCII armor attribute set for the context (see <see cref="P:Libgpgme.Context.Armor" />).
</para>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an array of engine specific expressions that are used to limit the list to all keys matching the pattern.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public Libgpgme.GenkeyResult GenerateKey (Libgpgme.Protocol protocoltype, Libgpgme.KeyParameters keyparms);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.GenkeyResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocoltype" Type="Libgpgme.Protocol" />
        <Parameter Name="keyparms" Type="Libgpgme.KeyParameters" />
      </Parameters>
      <Docs>
        <param name="protocoltype">A <see cref="T:Libgpgme.Protocol" /> the specifies the type of the new key pairs.</param>
        <param name="keyparms">A <see cref="C:Libgpgme.KeyParameters" /> object.</param>
        <summary>Generates a new key and adds it to the store.</summary>
        <returns>A <see cref="C:Libgpgme.GenkeyResult" /> object that contains information about a new generated key pairs. </returns>
        <remarks>
          <block subset="none" type="note">
            <para>
Currently only the OpenPGP protocol is supported.
</para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public Libgpgme.Key GetKey (string fpr, bool secretOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fpr" Type="System.String" />
        <Parameter Name="secretOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fpr">A <see cref="T:System.String" /> containing the fingerprint (or key ID) of the requested key.</param>
        <param name="secretOnly">If <see langword="true" />, get the secret key.</param>
        <summary>Can be used to retrieve a single key.</summary>
        <returns>A <see cref="C:Libgpgme.Key" /> object. Depending on the engine a <see cref="C:Libgpgme.PgpKey" /> or <see cref="C:Libgpgme.X509Key" /> is returned.</returns>
        <remarks>GPGME holds a reference to the returned <see cref="C:Libgpgme.Key" /> object as long as the key instance did not get garbage collected or got disposed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public Libgpgme.Key[] GetKeyList (string pattern, bool secretOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="secretOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:System.String" /> containing an engine specific expression that is used to limit the list of returned <see cref="C:Libgpgme.Key" /> objects.</param>
        <param name="secretOnly">If <see langword="true" />, the returning list is restricted to secret keys only.</param>
        <summary>Initiates a key listing operation.</summary>
        <returns>An array of <see cref="C:Libgpgme.Key" /> objects. Depending on the engine <see cref="C:Libgpgme.PgpKey" />s or <see cref="C:Libgpgme.X509Key" />s are returned.</returns>
        <remarks>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an engine specific expression that is used to limit the list to all keys matching the pattern.  
</para>
          <block subset="none" type="note">
            <para>
The total length of the pattern is restricted to an engine-specific maximum (a couple of hundred characters are usually accepted).  The pattern should be used to restrict the search to a certain common name or user, not to list many specific keys at once by listing their fingerprints or key IDs.
</para>
          </block>
          <para>
If <paramref name="secretOnly" /> is not <see langword="false" />, the list is restricted to secret keys only.
</para>
          <para>
The <see cref="P:Libgpgme.KeyStore.Context" /> (context to which the KeyStore object is attached to) will be busy until all keys are received.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public Libgpgme.Key[] GetKeyList (string[] pattern, bool secretOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String[]" />
        <Parameter Name="secretOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">An array of <see cref="T:System.String" />. Each string should contain an engine specific expression that is used to limit the list of returned <see cref="C:Libgpgme.Key" /> objects.</param>
        <param name="secretOnly">If <see langword="true" />, the returning list is restricted to secret keys only.</param>
        <summary>Initiates a key listing operation.</summary>
        <returns>An array of <see cref="C:Libgpgme.Key" /> objects. Depending on the engine <see cref="C:Libgpgme.PgpKey" />s or <see cref="C:Libgpgme.X509Key" />s are returned.</returns>
        <remarks>
          <para>
If <paramref name="pattern" /> is <see langword="null" />, all available keys are returned.  Otherwise, <paramref name="pattern" /> contains an array with engine specific expressions that are used to limit the list to all keys matching the pattern.  
</para>
          <block subset="none" type="note">
            <para>
The total length of the pattern is restricted to an engine-specific maximum (a couple of hundred characters are usually accepted).  The pattern should be used to restrict the search to a certain common name or user, not to list many specific keys at once by listing their fingerprints or key IDs.
</para>
          </block>
          <para>
If <paramref name="secretOnly" /> is not <see langword="false" />, the list is restricted to secret keys only.
</para>
          <para>
The <see cref="P:Libgpgme.KeyStore.Context" /> (context to which the KeyStore object is attached to) will be busy until all keys are received.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrustList">
      <MemberSignature Language="C#" Value="public Libgpgme.TrustItem[] GetTrustList (string pattern, int maxlevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.TrustItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="maxlevel" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="maxlevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public Libgpgme.ImportResult Import (Libgpgme.GpgmeData keydata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.ImportResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keydata" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="keydata">A <see cref="C:Libgpgme.GpgmeData" /> object that contains the keys.</param>
        <summary>Adds the keys in the user-supplied data buffer to the key ring.</summary>
        <returns>An <see cref="C:Libgpgme.ImportResult" /> object.</returns>
        <remarks>
          <para>
The function adds the keys in the data buffer <paramref name="keydata" /> to the key ring of the crypto engine used by <see cref="P:Libgpgme.KeyStore.Context" />. The format of <paramref name="keydata" /> can be ASCII armored, for example, but the details are specific to the crypto engine.
</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
