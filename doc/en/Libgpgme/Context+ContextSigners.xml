<Type Name="Context+ContextSigners" FullName="Libgpgme.Context+ContextSigners">
  <TypeSignature Language="C#" Value="public class Context.ContextSigners : System.Collections.Generic.IEnumerable&lt;Libgpgme.Key&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Context/ContextSigners extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class Libgpgme.Key&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>gpgme-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Libgpgme.Key&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A class used to list and modify the signers of a context.</summary>
    <remarks>
      <para>
The <see cref="C:Libgpgme.Context+ContextSigners" /> class allows you to list (enumerate), add and remove (clear) all signers.
</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Libgpgme.Key signer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class Libgpgme.Key signer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signer" Type="Libgpgme.Key" />
      </Parameters>
      <Docs>
        <param name="signer">The key that shall be used for cryptographic signing operations.</param>
        <summary>Add a key to the list of signers.</summary>
        <remarks>After adding the key <paramref name="signer" /> to the list of signers it will be used within the <see cref="M:Libgpgme.Context.Sign(Libgpgme.GpgmeData,Libgpgme.GpgmeData,Libgpgme.SignatureMode)" /> and the <see cref="M:Libgpgme.Context.EncryptAndSign(Libgpgme.Key[],Libgpgme.EncryptFlags,Libgpgme.GpgmeData,Libgpgme.GpgmeData)" /> method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove all keys from the list of signers.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Enum">
      <MemberSignature Language="C#" Value="public Libgpgme.Key Enum (int seq);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.Key Enum(int32 seq) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seq" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seq">The number of the key that shall be retrieved.</param>
        <summary>Retrieve a reference to specified signer key.</summary>
        <returns>The <paramref name="seq" /><see cref="C:Libgpgme.Key" /> in the list of signers. <see langword="null" />, if <paramref name="seq" /> is out of range.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public Libgpgme.Key[] Get ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.Key[] Get() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Key[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve an array of all signer keys.</summary>
        <returns>An array of all signer <see cref="C:Libgpgme.Key" />s.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;Libgpgme.Key&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Libgpgme.Key&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Libgpgme.Key&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
