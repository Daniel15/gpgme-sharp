<Type Name="Context" FullName="Libgpgme.Context">
  <TypeSignature Language="C#" Value="public class Context : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Context extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>gpgme-sharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>GPGME context for cryptographic operations.</summary>
    <remarks>All cryptographic operations in GPGME are performed within a context, which contains the internal state of the operation as well as configuration parameters.  By using several contexts you can run several cryptographic operations in parallel, with different configuration.
</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Context ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new GPGME context.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="_last_callback_exception">
      <MemberSignature Language="C#" Value="public Exception _last_callback_exception;" />
      <MemberSignature Language="ILAsm" Value=".field public class System.Exception _last_callback_exception" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddKeylistMode">
      <MemberSignature Language="C#" Value="public void AddKeylistMode (Libgpgme.KeylistMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddKeylistMode(valuetype Libgpgme.KeylistMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Libgpgme.KeylistMode" />
      </Parameters>
      <Docs>
        <param name="mode">A <see cref="T:Libgpgme.KeylistMode" /> that shall be added.</param>
        <summary>Can be used to add a single <see cref="T:Libgpgme.KeylistMode" /> to the context.</summary>
        <remarks>If you add the SignatureNotations mode, the Signatures mode will be added as well.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Armor">
      <MemberSignature Language="C#" Value="public bool Armor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Armor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies if the output should be ASCII armored.</summary>
        <value>
          <see langword="true" /> if ASCII armor output is requested. Otherwise <see langword="false" />.</value>
        <remarks>Must be set before any crypto operation. The default value is <see langword="false" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CERTIFICATES_ALL">
      <MemberSignature Language="C#" Value="public const int CERTIFICATES_ALL = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CERTIFICATES_ALL = (-1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Include all certificates.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CERTIFICATES_ALL_EXCEPT_ROOT">
      <MemberSignature Language="C#" Value="public const int CERTIFICATES_ALL_EXCEPT_ROOT = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CERTIFICATES_ALL_EXCEPT_ROOT = (-2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>Include all certificates except the root certificate.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CERTIFICATES_DEFAULT">
      <MemberSignature Language="C#" Value="public const int CERTIFICATES_DEFAULT = -256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CERTIFICATES_DEFAULT = (-256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-256</MemberValue>
      <Docs>
        <summary>Fall back to the default of the crypto backend.  This is the default for GPGME.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CERTIFICATES_NO">
      <MemberSignature Language="C#" Value="public const int CERTIFICATES_NO = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CERTIFICATES_NO = (0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Include no certificates.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CERTIFICATES_SENDER_ONLY">
      <MemberSignature Language="C#" Value="public const int CERTIFICATES_SENDER_ONLY = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CERTIFICATES_SENDER_ONLY = (1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Include the sender's certificate only.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ClearPassphraseFunction">
      <MemberSignature Language="C#" Value="public void ClearPassphraseFunction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearPassphraseFunction() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the passphrase callback delegate in the context.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public Libgpgme.DecryptionResult Decrypt (Libgpgme.GpgmeData cipher, Libgpgme.GpgmeData plain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.DecryptionResult Decrypt(class Libgpgme.GpgmeData cipher, class Libgpgme.GpgmeData plain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.DecryptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cipher" Type="Libgpgme.GpgmeData" />
        <Parameter Name="plain" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="cipher">A source <see cref="C:Libgpgme.GpgmeData" /> buffer with the ciphertext.</param>
        <param name="plain">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer for the plaintext (decrypted text).</param>
        <summary>Decrypts a ciphertext.</summary>
        <returns>A <see cref="C:Libgpgme.DecryptionResult" /> object with decryption result information.</returns>
        <remarks>The function decrypts the ciphertext in the data object <paramref name="cipher" /> and stores it into the data object <paramref name="plain" />. You need to specify a passphrase callback by using the <see cref="M:Libgpgme.Context.SetPassphraseFunction(Libgpgme.PassphraseDelegate)" /> method if the user does not use gpg-agent or any other passphrase or pin-entry software.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecryptAndVerify">
      <MemberSignature Language="C#" Value="public Libgpgme.CombinedResult DecryptAndVerify (Libgpgme.GpgmeData cipher, Libgpgme.GpgmeData plain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.CombinedResult DecryptAndVerify(class Libgpgme.GpgmeData cipher, class Libgpgme.GpgmeData plain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.CombinedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cipher" Type="Libgpgme.GpgmeData" />
        <Parameter Name="plain" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="cipher">A source <see cref="C:Libgpgme.GpgmeData" /> buffer with the ciphertext.</param>
        <param name="plain">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer for the plaintext (decrypted text).</param>
        <summary>Decrypts and verifys a ciphertext.</summary>
        <returns>A <see cref="C:Libgpgme.CombinedResult" /> object with decryption and verification information.</returns>
        <remarks>
          <para>
 The function decrypts the ciphertext in the data object <paramref name="cipher" /> and stores it into the data object <paramref name="plain" />. If <paramref name="cipher" /> contains signatures, they will be verified.
</para>
          <para>
 After the operation completed, the <see cref="C:Libgpgme.EncryptionResult" /> and the <see cref="C:Libgpgme.VerificationResult" /> property inside the <see cref="C:Libgpgme.CombinedResult" /> object can be used to retrieve more information about the signatures.
</para>
          <para>
If the <see cref="P:Libgpgme.CombinedResult.DecryptionResult" /> property is <see langword="null" />, <paramref name="cipher" /> did not contain any data to decrypt. However, it might still be signed. The information about detected signatures is available through the <see cref="P:Libgpgme.CombinedResult.VerificationResult" /> property.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disposes a GPGME context.</summary>
        <remarks> The function destroys the context with its handle and releases all associated resources.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public Libgpgme.EncryptionResult Encrypt (Libgpgme.Key[] recipients, Libgpgme.EncryptFlags flags, Libgpgme.GpgmeData plain, Libgpgme.GpgmeData cipher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.EncryptionResult Encrypt(class Libgpgme.Key[] recipients, valuetype Libgpgme.EncryptFlags flags, class Libgpgme.GpgmeData plain, class Libgpgme.GpgmeData cipher) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.EncryptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="Libgpgme.Key[]" />
        <Parameter Name="flags" Type="Libgpgme.EncryptFlags" />
        <Parameter Name="plain" Type="Libgpgme.GpgmeData" />
        <Parameter Name="cipher" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="recipients">An array of <see cref="T:Libgpgme.Key" /> objects that includes all recipients that shall be able to decrypt the ciphertext.</param>
        <param name="flags">Flags that have an effect on the encryption process.</param>
        <param name="plain">A source <see cref="C:Libgpgme.GpgmeData" /> buffer with the plaintext.</param>
        <param name="cipher">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer for the ciphertext (encrypted text).</param>
        <summary>Encrypts a plaintext.</summary>
        <returns>An <see cref="T:Libgpgme.EncryptionResult" /> object.</returns>
        <remarks>The function encrypts the plaintext in the data object <paramref name="plain" /> for the recipients <paramref name="recipients" /> and stores the ciphertext in the data object <paramref name="cipher" />. The type of the ciphertext created is determined by the ASCII armor (<see cref="P:Libgpgme.Context.Armor" />) and text mode attributes (<see cref="P:Libgpgme.Context.TextMode" />) set in the currently used context.
<para>
If <paramref name="recipients" /> is <see langword="null" />, symmetric rather than public key encryption is performed.  Symmetrically encrypted cipher text can be deciphered with <see cref="M:Libgpgme.Context.Decrypt(Libgpgme.GpgmeData,Libgpgme.GpgmeData)" />.  Note that in this case the crypto backend needs to retrieve a passphrase from the user.  Symmetric encryption is currently only supported for the OpenPGP crypto backend.
</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncryptAndSign">
      <MemberSignature Language="C#" Value="public Libgpgme.EncryptionResult EncryptAndSign (Libgpgme.Key[] recipients, Libgpgme.EncryptFlags flags, Libgpgme.GpgmeData plain, Libgpgme.GpgmeData cipher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.EncryptionResult EncryptAndSign(class Libgpgme.Key[] recipients, valuetype Libgpgme.EncryptFlags flags, class Libgpgme.GpgmeData plain, class Libgpgme.GpgmeData cipher) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.EncryptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="Libgpgme.Key[]" />
        <Parameter Name="flags" Type="Libgpgme.EncryptFlags" />
        <Parameter Name="plain" Type="Libgpgme.GpgmeData" />
        <Parameter Name="cipher" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="recipients">An array of <see cref="T:Libgpgme.Key" /> objects that includes all recipients that shall be able to decrypt the ciphertext.</param>
        <param name="flags">Flags that have an effect on the encryption process.</param>
        <param name="plain">A source <see cref="C:Libgpgme.GpgmeData" /> buffer with the plaintext.</param>
        <param name="cipher">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer for the ciphertext (encrypted and signed text).</param>
        <summary>A combined crypto operation that encrypts a plaintext and signs the result.</summary>
        <returns>An <see cref="T:Libgpgme.EncryptionResult" /> object.</returns>
        <remarks> The function does a combined encrypt and sign operation.  It is used like <see cref="M:Libgpgme.Context.Encrypt(Libgpgme.Key[],Libgpgme.EncryptFlags,Libgpgme.GpgmeData,Libgpgme.GpgmeData)" />, but the ciphertext also contains signatures for the signers listed in the current Context. See <see cref="P:Libgpgme.Context.Signers" /> for more information.
<block subset="none" type="note"><para>
The combined encrypt and sign operation is currently only available for the OpenPGP crypto engine.
  </para></block></remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineInfo">
      <MemberSignature Language="C#" Value="public Libgpgme.EngineInfo EngineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Libgpgme.EngineInfo EngineInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.EngineInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the engine information from the current context.</summary>
        <value>An <see cref="C:Libgpgme.EngineInfo" /> object.</value>
        <remarks>
          <see cref="T:Libgpgme.EngineInfo" /> objects are linked together through the <see cref="P:Libgpgme.EngineInfo.Next" /> property. You actually receive a linked list, that can be enumerated through the <see cref="M:Libgpgme.EngineInfo.GetEnumerator()" /> method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Context ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPassphraseFunction">
      <MemberSignature Language="C#" Value="public bool HasPassphraseFunction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPassphraseFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Can be used to determinate whether the current context has a passphrase callback function set or not.</summary>
        <value>A <see cref="T:System.Boolean" />.
<para><see langword="true" /> if the user already specified a passphrase callback function (delegate) by using the <see cref="M:Libgpgme.Context.SetPassphraseFunction(PassphraseDelegate)" /> or <see cref="M:Libgpgme.Context.SetPassphraseFunction(PassphraseDelegate, IntPtr)" /> method.
</para><para><see langword="false" /> if not passphrase callback function has been set (default).
</para></value>
        <remarks>
          <para>
The user can unset the passphrase callback function by calling <see cref="M:Libgpgme.Context.ClearPassphraseFunction()" />.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludedCerts">
      <MemberSignature Language="C#" Value="public int IncludedCerts { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IncludedCerts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies how many certificates should be included in an S/MIME signed message.</summary>
        <value>An <see cref="T:System.Integer" />. Allowed values are:
<para><list type="table"><listheader><term>Const</term><description>Description</description></listheader><item><term><see cref="P:Libgpgme.Context.CERTIFICATES_ALL" /></term><description>Include all certificates.</description></item><item><term><see cref="P:Libgpgme.Context.CERTIFICATES_ALL_EXCEPT_ROOT" /></term><description>Include all certificates except the root certificate.</description></item><item><term><see cref="P:Libgpgme.Context.CERTIFICATES_DEFAULT" /></term><description>Fall back to the default of the crypto backend.  This is the default for GPGME.</description></item><item><term><see cref="P:Libgpgme.Context.CERTIFICATES_NO" /></term><description>Include no certificates.</description></item><item><term><see cref="P:Libgpgme.Context.CERTIFICATES_SENDER_ONLY" /></term><description>Include the sender's certificate only.</description></item><item><term><paramref name="n" /></term><description>Include the first <paramref name="n" /> certificates of the certificates path, starting from the sender's certificate.  The number <paramref name="n" /> must be positive.</description></item></list></para></value>
        <remarks>The function specifies how many certificates should be included in an S/MIME signed message.  By default, only the sender's certificate is included.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Can be used to determinate whether the current context is still valid.</summary>
        <value>
          <para>
            <see langword="true" /> if the context is still valid.
</para>
          <para>
            <see langword="false" /> if the context has been disposed.
</para>
        </value>
        <remarks>The context can be disposed by calling <see cref="M:Libgpgme.Context.Dispose()" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeylistMode">
      <MemberSignature Language="C#" Value="public Libgpgme.KeylistMode KeylistMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Libgpgme.KeylistMode KeylistMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.KeylistMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Can be used to change the default behaviour of the key listing methods.</summary>
        <value>
          <paramref name="mode" /> is a bitwise-or combination of one or multiple <see cref="T:Libgpgme.KeylistMode" /> values.</value>
        <remarks>
          <para>
This property can be used to change the default behaviour of the key listing methods. The value in <paramref name="mode" /> is a bitwise-or combination of one or multiple <see cref="T:Libgpgme.KeylistMode" /> values.
</para>
          <block subset="none" type="note">
            <para>
At least one of <see cref="P:Libgpgme.KeylistMode.Local" /> and <see cref="P:Libgpgme.KeylistMode.Extern" /> must be specified.
  </para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyStore">
      <MemberSignature Language="C#" Value="public Libgpgme.KeyStore KeyStore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Libgpgme.KeyStore KeyStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.KeyStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Can be used to retrieve the engine-specific key store.</summary>
        <value>A <see cref="C:Libgpgme.KeyStore" /> object.</value>
        <remarks>A KeyStore usually implements the <see cref="T:Libgpgme.IKeyStore" /> interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastCallbackException">
      <MemberSignature Language="C#" Value="public Exception LastCallbackException;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The last <see cref="T:System.Exception" /> that has been thrown during a crypto operation.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Protocol">
      <MemberSignature Language="C#" Value="public Libgpgme.Protocol Protocol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Libgpgme.Protocol Protocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Protocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The protocol used within the context.</summary>
        <value>A <see cref="T:Libgpgme.Protocol" /> value.</value>
        <remarks>This property sets the protocol used within the context to <paramref name="proto" />. All crypto operations will be performed by the crypto engine configured for that protocol. 
<block subset="none" type="note"><para>
Setting the protocol does not check if the crypto engine for that protocol is available and installed correctly. Use <see cref="M:Libgpgme.Gpgme.EngineCheckVersion(Libgpgme.Protocol)" /> or <see cref="M:Libgpgme.Gpgme.GetEngineInfo()" /> to check availability.
  </para></block></remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveKeylistMode">
      <MemberSignature Language="C#" Value="public void RemoveKeylistMode (Libgpgme.KeylistMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveKeylistMode(valuetype Libgpgme.KeylistMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Libgpgme.KeylistMode" />
      </Parameters>
      <Docs>
        <param name="mode">A <see cref="T:Libgpgme.KeylistMode" /> that shall be removed.</param>
        <summary>Can be used to remove a single <see cref="T:Libgpgme.KeylistMode" /> from the context.</summary>
        <remarks>If you remove the Signatures mode, the SignatureNotations mode will be removed as well.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDllDirectory">
      <MemberSignature Language="C#" Value="public void SetDllDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDllDirectory(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEngineInfo">
      <MemberSignature Language="C#" Value="public void SetEngineInfo (Libgpgme.Protocol proto, string filename, string homedir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEngineInfo(valuetype Libgpgme.Protocol proto, string filename, string homedir) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proto" Type="Libgpgme.Protocol" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="homedir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="proto">Specifies the <see cref="T:Libgpgme.Protocol" /> for which the changes shall take effect.</param>
        <param name="filename">A <see langword="string" /> containing the file name of the executable program implementing protocol <paramref name="proto" /> (the implementing crypto engine).</param>
        <param name="homedir">A <see langword="string" /> containing the directory name of the configuration directory for this crypto engine.</param>
        <summary>Changes the configuration of the crypto engine for the context.

</summary>
        <remarks>The function changes the configuration of the crypto engine implementing the protocol <paramref name="proto" /> for the context.
<para><paramref name="filename" /> is the file name of the executable program implementing this protocol, and <paramref name="homedir" /> is the directory name of the configuration directory for this crypto engine.  If <paramref name="homedir" /> is <see langword="null" />, the engine's default will be used.
</para><block subset="none" type="note"><para>
     Currently this function must be used before starting the first
     crypto operation.  It is unspecified if and when the changes will
     take effect if the function is called after starting the first
     operation on the context.
  </para></block></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPassphraseFunction">
      <MemberSignature Language="C#" Value="public void SetPassphraseFunction (Libgpgme.PassphraseDelegate func);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPassphraseFunction(class Libgpgme.PassphraseDelegate func) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="func" Type="Libgpgme.PassphraseDelegate" />
      </Parameters>
      <Docs>
        <param name="func">A <see cref="T:Libgpgme.PassphraseDelegate" /> (callback function) that will be called if a crypto operation needs a passphrase from the user.</param>
        <summary>Sets a <see cref="T:Libgpgme.PassphraseDelegate" /> (callback function) that will be called if a crypto operation needs a passphrase from the user.</summary>
        <remarks>
          <para>
The function sets the function <paramref name="func" /> that is used when a passphrase needs to be provided by the user.  The function <paramref name="func" /> needs to implemented by the user.  By default, no passphrase callback function is set.
</para>
          <para>
Not all crypto engines require this callback to retrieve the passphrase.  It is better if the engine retrieves the passphrase from a trusted agent (a daemon process), rather than having each user to implement their own passphrase query.  Some engines do not even support an external passphrase callback at all, in this case a <see cref="T:System.NotSupportedException" /> is thrown.
</para>
          <para>
The user can disable the use of a passphrase callback function by calling <see cref="M:Libgpgme.Context.ClearPassphraseFunction()" /> method.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPassphraseFunction">
      <MemberSignature Language="C#" Value="public void SetPassphraseFunction (Libgpgme.PassphraseDelegate func, IntPtr hook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPassphraseFunction(class Libgpgme.PassphraseDelegate func, native int hook) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="func" Type="Libgpgme.PassphraseDelegate" />
        <Parameter Name="hook" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="func">A <see cref="T:Libgpgme.PassphraseDelegate" /> (callback function) that will be called if a crypto operation needs a passphrase from the user.</param>
        <param name="hook">To be added.</param>
        <param name="Hook">Whenever <paramref name="func" /> is called, the supplied <see cref="C:Libgpgme.PassphraseInfo" /> object has its property <see cref="P:Libgpgme.PassphraseInfo.Hook" /> set with the value of <paramref name="Hook" />. </param>
        <summary>Sets a <see cref="T:Libgpgme.PassphraseDelegate" /> (callback function) that will be called if a crypto operation needs a passphrase from the user.</summary>
        <remarks>
          <para>
The function sets the function <paramref name="func" /> that is used when a passphrase needs to be provided by the user.  The function <paramref name="func" /> needs to implemented by the user. By default, no passphrase callback function is set.
</para>
          <para>
Not all crypto engines require this callback to retrieve the passphrase.  It is better if the engine retrieves the passphrase from a trusted agent (a daemon process), rather than having each user to implement their own passphrase query.  Some engines do not even support an external passphrase callback at all, in this case a <see cref="T:System.NotSupportedException" /> is thrown.
</para>
          <para>
The user can disable the use of a passphrase callback function by calling <see cref="M:Libgpgme.Context.ClearPassphraseFunction()" /> method.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public Libgpgme.SignatureResult Sign (Libgpgme.GpgmeData plain, Libgpgme.GpgmeData sig, Libgpgme.SignatureMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.SignatureResult Sign(class Libgpgme.GpgmeData plain, class Libgpgme.GpgmeData sig, valuetype Libgpgme.SignatureMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.SignatureResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plain" Type="Libgpgme.GpgmeData" />
        <Parameter Name="sig" Type="Libgpgme.GpgmeData" />
        <Parameter Name="mode" Type="Libgpgme.SignatureMode" />
      </Parameters>
      <Docs>
        <param name="plain">A source <see cref="C:Libgpgme.GpgmeData" /> buffer with the plaintext.</param>
        <param name="sig">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer for the signature.</param>
        <param name="mode">A <see cref="T:Libgpgme.SignatureMode" /> that specifies the desired signature mode.</param>
        <summary>Signs a plaintext.</summary>
        <returns>A <see cref="C:Libgpgme.SignatureResult" /> object.</returns>
        <remarks>
          <para>
 The function creates a signature for the text in the data object <paramref name="plain" /> and returns it in the data object <paramref name="sig" />.  The type of the signature created is determined by the ASCII armor (<see cref="P:Libgpgme.Context.Armor" />) and text mode (<see cref="P:Libgpgme.Context.TextMode" />) attributes set for the context and the requested signature mode <paramref name="mode" />.
</para>
          <para>
The resulting signature in the data buffer <paramref name="sig" /> contains signatures for the signers listed in the current context. See <see cref="P:Libgpgme.Context.Signers" /> for more information.
</para>
          <para>
After the operation completed successfully, the result can be checked through the returned <see cref="C:Libgpgme.SignatureResult" /> object.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureNotations">
      <MemberSignature Language="C#" Value="public Libgpgme.Context.ContextSignatureNotations SignatureNotations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Libgpgme.Context/ContextSignatureNotations SignatureNotations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Context+ContextSignatureNotations</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To specify arbitrary signature notation data.</summary>
        <value>A <see cref="T:Libgpgme.Context+ContextSignatureNotations" /> object.</value>
        <remarks>By using the returned <see cref="T:Libgpgme.Context+ContextSignatureNotations" /> object, you can attach arbitrary notation data
to a signature. This information is then available to the user when the signature is verified.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="Signers">
      <MemberSignature Language="C#" Value="public Libgpgme.Context.ContextSigners Signers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Libgpgme.Context/ContextSigners Signers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.Context+ContextSigners</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Can be used to modify the list of signers for this context.</summary>
        <value>A <see cref="T:Libgpgme.Context+ContextSigners" /> object.</value>
        <remarks>
          <para>
A signature can contain signatures by one or more signer keys.  The set of keys used to create a signatures is contained in a context, and is applied to all signing operations in this context (until the set is changed).
</para>
          <para>
With the <see cref="P:Libgpgme.Context.Signers" /> property you can list (enumerate), add and remove (clear) all signers from the current context.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMode">
      <MemberSignature Language="C#" Value="public bool TextMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TextMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies if canonical text mode should be used.</summary>
        <value>If <see langword="true" /> Canonical text mode enabled, otherwise it is disabled.</value>
        <remarks>
          <para>
The value of this property specifies if canonical text mode should be used.  By default, text mode is not used.
</para>
          <para>
Text mode is for example used for the RFC2015 signatures; note that the updated RFC 3156 mandates that the mail user agent does some preparations so that text mode is not needed anymore.
</para>
          <block subset="none" type="note">
            <para>
This option is only relevant to the OpenPGP crypto engine, and ignored by all other engines.
  </para>
          </block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public Libgpgme.VerificationResult Verify (Libgpgme.GpgmeData signature, Libgpgme.GpgmeData signedtext, Libgpgme.GpgmeData plain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Libgpgme.VerificationResult Verify(class Libgpgme.GpgmeData signature, class Libgpgme.GpgmeData signedtext, class Libgpgme.GpgmeData plain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Libgpgme.VerificationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="Libgpgme.GpgmeData" />
        <Parameter Name="signedtext" Type="Libgpgme.GpgmeData" />
        <Parameter Name="plain" Type="Libgpgme.GpgmeData" />
      </Parameters>
      <Docs>
        <param name="signature">A source <see cref="C:Libgpgme.GpgmeData" /> buffer with a detached or normal signature.</param>
        <param name="signedtext">A source <see cref="C:Libgpgme.GpgmeData" /> buffer with the plaintext.</param>
        <param name="plain">A destination <see cref="C:Libgpgme.GpgmeData" /> buffer that contains the plaintext if <paramref name="signature" /> was a normal signature.</param>
        <summary>Verifies a signature.</summary>
        <returns>A <see cref="T:Libgpgme.VerificationResult" /> object.</returns>
        <remarks>
          <para>
The function verifies that the signature in the data object <paramref name="signature" /> is a valid signature. If <paramref name="signature" /> is a detached signature, then the signed text should be provided in <paramref name="signedtext" /> and <paramref name="plain" /> should be <see langword="null" />. Otherwise, if <paramref name="signature" /> is a normal (or cleartext) signature, <paramref name="signedtext" /> should be <see langword="null" /> and <paramref name="plain" /> should be a writable data object that will contain the plaintext after successful verification.
</para>
          <para>
The results of the individual signature verifications can be checked with the returned <see cref="T:Libgpgme.VerificationResult" /> object.
</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
